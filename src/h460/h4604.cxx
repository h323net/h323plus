//
// h4604.cxx
//
// Code automatically generated by asnparse.
//

#ifdef P_USE_PRAGMA
#pragma implementation "h4604.h"
#endif

#include <h323.h>
#include "h460/h4604.h"

#define new PNEW


#if ! H323_DISABLE_H4604




#ifndef PASN_NOPRINTON
const static PASN_Names Names_h4604_CallPriorityInfo_priorityValue[]={
      {"emergencyAuthorized",0}
     ,{"emergencyPublic",1}
     ,{"high",2}
     ,{"normal",3}
};
#endif
//
// CallPriorityInfo_priorityValue
//

h4604_CallPriorityInfo_priorityValue::h4604_CallPriorityInfo_priorityValue(unsigned tag, PASN_Object::TagClass tagClass)
  : PASN_Choice(tag, tagClass, 4, TRUE
#ifndef PASN_NOPRINTON
    ,(const PASN_Names *)Names_h4604_CallPriorityInfo_priorityValue,4
#endif
)
{
}


PBoolean h4604_CallPriorityInfo_priorityValue::CreateObject()
{
  choice = (tag <= e_normal) ? new PASN_Null() : NULL;
  return choice != NULL;
}


PObject * h4604_CallPriorityInfo_priorityValue::Clone() const
{
#ifndef PASN_LEANANDMEAN
  PAssert(IsClass(h4604_CallPriorityInfo_priorityValue::Class()), PInvalidCast);
#endif
  return new h4604_CallPriorityInfo_priorityValue(*this);
}


//
// ArrayOf_ClearToken
//

h4604_ArrayOf_ClearToken::h4604_ArrayOf_ClearToken(unsigned tag, PASN_Object::TagClass tagClass)
  : PASN_Array(tag, tagClass)
{
}


PASN_Object * h4604_ArrayOf_ClearToken::CreateObject() const
{
  return new H235_ClearToken;
}


H235_ClearToken & h4604_ArrayOf_ClearToken::operator[](PINDEX i) const
{
  return (H235_ClearToken &)array[i];
}


PObject * h4604_ArrayOf_ClearToken::Clone() const
{
#ifndef PASN_LEANANDMEAN
  PAssert(IsClass(h4604_ArrayOf_ClearToken::Class()), PInvalidCast);
#endif
  return new h4604_ArrayOf_ClearToken(*this);
}


//
// ArrayOf_CryptoToken
//

h4604_ArrayOf_CryptoToken::h4604_ArrayOf_CryptoToken(unsigned tag, PASN_Object::TagClass tagClass)
  : PASN_Array(tag, tagClass)
{
}


PASN_Object * h4604_ArrayOf_CryptoToken::CreateObject() const
{
  return new H235_CryptoToken;
}


H235_CryptoToken & h4604_ArrayOf_CryptoToken::operator[](PINDEX i) const
{
  return (H235_CryptoToken &)array[i];
}


PObject * h4604_ArrayOf_CryptoToken::Clone() const
{
#ifndef PASN_LEANANDMEAN
  PAssert(IsClass(h4604_ArrayOf_CryptoToken::Class()), PInvalidCast);
#endif
  return new h4604_ArrayOf_CryptoToken(*this);
}



#ifndef PASN_NOPRINTON
const static PASN_Names Names_h4604_CallPriorityInfo_rejectReason[]={
      {"priorityUnavailable",0}
     ,{"priorityUnauthorized",1}
     ,{"priorityValueUnknown",2}
};
#endif
//
// CallPriorityInfo_rejectReason
//

h4604_CallPriorityInfo_rejectReason::h4604_CallPriorityInfo_rejectReason(unsigned tag, PASN_Object::TagClass tagClass)
  : PASN_Choice(tag, tagClass, 3, TRUE
#ifndef PASN_NOPRINTON
    ,(const PASN_Names *)Names_h4604_CallPriorityInfo_rejectReason,3
#endif
)
{
}


PBoolean h4604_CallPriorityInfo_rejectReason::CreateObject()
{
  choice = (tag <= e_priorityValueUnknown) ? new PASN_Null() : NULL;
  return choice != NULL;
}


PObject * h4604_CallPriorityInfo_rejectReason::Clone() const
{
#ifndef PASN_LEANANDMEAN
  PAssert(IsClass(h4604_CallPriorityInfo_rejectReason::Class()), PInvalidCast);
#endif
  return new h4604_CallPriorityInfo_rejectReason(*this);
}



#ifndef PASN_NOPRINTON
const static PASN_Names Names_h4604_CountryInternationalNetworkCallOriginationIdentification_numberingPlan[]={
      {"x121",0}
     ,{"e164",1}
};
#endif
//
// CountryInternationalNetworkCallOriginationIdentification_numberingPlan
//

h4604_CountryInternationalNetworkCallOriginationIdentification_numberingPlan::h4604_CountryInternationalNetworkCallOriginationIdentification_numberingPlan(unsigned tag, PASN_Object::TagClass tagClass)
  : PASN_Choice(tag, tagClass, 2, TRUE
#ifndef PASN_NOPRINTON
    ,(const PASN_Names *)Names_h4604_CountryInternationalNetworkCallOriginationIdentification_numberingPlan,2
#endif
)
{
}


#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
h4604_CountryInternationalNetworkCallOriginationIdentification_numberingPlan::operator h4604_CountryInternationalNetworkCallOriginationIdentification_numberingPlan_x121 &() const
#else
h4604_CountryInternationalNetworkCallOriginationIdentification_numberingPlan::operator h4604_CountryInternationalNetworkCallOriginationIdentification_numberingPlan_x121 &()
{
#ifndef PASN_LEANANDMEAN
  PAssert(PIsDescendant(PAssertNULL(choice), h4604_CountryInternationalNetworkCallOriginationIdentification_numberingPlan_x121), PInvalidCast);
#endif
  return *(h4604_CountryInternationalNetworkCallOriginationIdentification_numberingPlan_x121 *)choice;
}


h4604_CountryInternationalNetworkCallOriginationIdentification_numberingPlan::operator const h4604_CountryInternationalNetworkCallOriginationIdentification_numberingPlan_x121 &() const
#endif
{
#ifndef PASN_LEANANDMEAN
  PAssert(PIsDescendant(PAssertNULL(choice), h4604_CountryInternationalNetworkCallOriginationIdentification_numberingPlan_x121), PInvalidCast);
#endif
  return *(h4604_CountryInternationalNetworkCallOriginationIdentification_numberingPlan_x121 *)choice;
}


#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
h4604_CountryInternationalNetworkCallOriginationIdentification_numberingPlan::operator h4604_CountryInternationalNetworkCallOriginationIdentification_numberingPlan_e164 &() const
#else
h4604_CountryInternationalNetworkCallOriginationIdentification_numberingPlan::operator h4604_CountryInternationalNetworkCallOriginationIdentification_numberingPlan_e164 &()
{
#ifndef PASN_LEANANDMEAN
  PAssert(PIsDescendant(PAssertNULL(choice), h4604_CountryInternationalNetworkCallOriginationIdentification_numberingPlan_e164), PInvalidCast);
#endif
  return *(h4604_CountryInternationalNetworkCallOriginationIdentification_numberingPlan_e164 *)choice;
}


h4604_CountryInternationalNetworkCallOriginationIdentification_numberingPlan::operator const h4604_CountryInternationalNetworkCallOriginationIdentification_numberingPlan_e164 &() const
#endif
{
#ifndef PASN_LEANANDMEAN
  PAssert(PIsDescendant(PAssertNULL(choice), h4604_CountryInternationalNetworkCallOriginationIdentification_numberingPlan_e164), PInvalidCast);
#endif
  return *(h4604_CountryInternationalNetworkCallOriginationIdentification_numberingPlan_e164 *)choice;
}


PBoolean h4604_CountryInternationalNetworkCallOriginationIdentification_numberingPlan::CreateObject()
{
  switch (tag) {
    case e_x121 :
      choice = new h4604_CountryInternationalNetworkCallOriginationIdentification_numberingPlan_x121();
      return TRUE;
    case e_e164 :
      choice = new h4604_CountryInternationalNetworkCallOriginationIdentification_numberingPlan_e164();
      return TRUE;
  }

  choice = NULL;
  return FALSE;
}


PObject * h4604_CountryInternationalNetworkCallOriginationIdentification_numberingPlan::Clone() const
{
#ifndef PASN_LEANANDMEAN
  PAssert(IsClass(h4604_CountryInternationalNetworkCallOriginationIdentification_numberingPlan::Class()), PInvalidCast);
#endif
  return new h4604_CountryInternationalNetworkCallOriginationIdentification_numberingPlan(*this);
}


//
// CountryInternationalNetworkCallOriginationIdentification_numberingPlan_x121
//

h4604_CountryInternationalNetworkCallOriginationIdentification_numberingPlan_x121::h4604_CountryInternationalNetworkCallOriginationIdentification_numberingPlan_x121(unsigned tag, PASN_Object::TagClass tagClass)
  : PASN_Sequence(tag, tagClass, 0, TRUE, 0)
{
  m_countryCode.SetConstraints(PASN_Object::FixedConstraint, 3);
  m_countryCode.SetCharacterSet(PASN_Object::FixedConstraint, "0123456789");
}


#ifndef PASN_NOPRINTON
void h4604_CountryInternationalNetworkCallOriginationIdentification_numberingPlan_x121::PrintOn(ostream & strm) const
{
  int indent = strm.precision() + 2;
  strm << "{\n";
  strm << setw(indent+14) << "countryCode = " << setprecision(indent) << m_countryCode << '\n';
  strm << setw(indent-1) << setprecision(indent-2) << "}";
}
#endif


PObject::Comparison h4604_CountryInternationalNetworkCallOriginationIdentification_numberingPlan_x121::Compare(const PObject & obj) const
{
#ifndef PASN_LEANANDMEAN
  PAssert(PIsDescendant(&obj, h4604_CountryInternationalNetworkCallOriginationIdentification_numberingPlan_x121), PInvalidCast);
#endif
  const h4604_CountryInternationalNetworkCallOriginationIdentification_numberingPlan_x121 & other = (const h4604_CountryInternationalNetworkCallOriginationIdentification_numberingPlan_x121 &)obj;

  Comparison result;

  if ((result = m_countryCode.Compare(other.m_countryCode)) != EqualTo)
    return result;

  return PASN_Sequence::Compare(other);
}


PINDEX h4604_CountryInternationalNetworkCallOriginationIdentification_numberingPlan_x121::GetDataLength() const
{
  PINDEX length = 0;
  length += m_countryCode.GetObjectLength();
  return length;
}


PBoolean h4604_CountryInternationalNetworkCallOriginationIdentification_numberingPlan_x121::Decode(PASN_Stream & strm)
{
  if (!PreambleDecode(strm))
    return FALSE;

  if (!m_countryCode.Decode(strm))
    return FALSE;

  return UnknownExtensionsDecode(strm);
}


void h4604_CountryInternationalNetworkCallOriginationIdentification_numberingPlan_x121::Encode(PASN_Stream & strm) const
{
  PreambleEncode(strm);

  m_countryCode.Encode(strm);

  UnknownExtensionsEncode(strm);
}


PObject * h4604_CountryInternationalNetworkCallOriginationIdentification_numberingPlan_x121::Clone() const
{
#ifndef PASN_LEANANDMEAN
  PAssert(IsClass(h4604_CountryInternationalNetworkCallOriginationIdentification_numberingPlan_x121::Class()), PInvalidCast);
#endif
  return new h4604_CountryInternationalNetworkCallOriginationIdentification_numberingPlan_x121(*this);
}


//
// CountryInternationalNetworkCallOriginationIdentification_numberingPlan_e164
//

h4604_CountryInternationalNetworkCallOriginationIdentification_numberingPlan_e164::h4604_CountryInternationalNetworkCallOriginationIdentification_numberingPlan_e164(unsigned tag, PASN_Object::TagClass tagClass)
  : PASN_Sequence(tag, tagClass, 0, TRUE, 0)
{
  m_countryCode.SetConstraints(PASN_Object::FixedConstraint, 3);
  m_countryCode.SetCharacterSet(PASN_Object::FixedConstraint, "0123456789");
  m_identificationCode.SetConstraints(PASN_Object::FixedConstraint, 1, 4);
  m_identificationCode.SetCharacterSet(PASN_Object::FixedConstraint, "0123456789");
}


#ifndef PASN_NOPRINTON
void h4604_CountryInternationalNetworkCallOriginationIdentification_numberingPlan_e164::PrintOn(ostream & strm) const
{
  int indent = strm.precision() + 2;
  strm << "{\n";
  strm << setw(indent+14) << "countryCode = " << setprecision(indent) << m_countryCode << '\n';
  strm << setw(indent+21) << "identificationCode = " << setprecision(indent) << m_identificationCode << '\n';
  strm << setw(indent-1) << setprecision(indent-2) << "}";
}
#endif


PObject::Comparison h4604_CountryInternationalNetworkCallOriginationIdentification_numberingPlan_e164::Compare(const PObject & obj) const
{
#ifndef PASN_LEANANDMEAN
  PAssert(PIsDescendant(&obj, h4604_CountryInternationalNetworkCallOriginationIdentification_numberingPlan_e164), PInvalidCast);
#endif
  const h4604_CountryInternationalNetworkCallOriginationIdentification_numberingPlan_e164 & other = (const h4604_CountryInternationalNetworkCallOriginationIdentification_numberingPlan_e164 &)obj;

  Comparison result;

  if ((result = m_countryCode.Compare(other.m_countryCode)) != EqualTo)
    return result;
  if ((result = m_identificationCode.Compare(other.m_identificationCode)) != EqualTo)
    return result;

  return PASN_Sequence::Compare(other);
}


PINDEX h4604_CountryInternationalNetworkCallOriginationIdentification_numberingPlan_e164::GetDataLength() const
{
  PINDEX length = 0;
  length += m_countryCode.GetObjectLength();
  length += m_identificationCode.GetObjectLength();
  return length;
}


PBoolean h4604_CountryInternationalNetworkCallOriginationIdentification_numberingPlan_e164::Decode(PASN_Stream & strm)
{
  if (!PreambleDecode(strm))
    return FALSE;

  if (!m_countryCode.Decode(strm))
    return FALSE;
  if (!m_identificationCode.Decode(strm))
    return FALSE;

  return UnknownExtensionsDecode(strm);
}


void h4604_CountryInternationalNetworkCallOriginationIdentification_numberingPlan_e164::Encode(PASN_Stream & strm) const
{
  PreambleEncode(strm);

  m_countryCode.Encode(strm);
  m_identificationCode.Encode(strm);

  UnknownExtensionsEncode(strm);
}


PObject * h4604_CountryInternationalNetworkCallOriginationIdentification_numberingPlan_e164::Clone() const
{
#ifndef PASN_LEANANDMEAN
  PAssert(IsClass(h4604_CountryInternationalNetworkCallOriginationIdentification_numberingPlan_e164::Class()), PInvalidCast);
#endif
  return new h4604_CountryInternationalNetworkCallOriginationIdentification_numberingPlan_e164(*this);
}


//
// CallPriorityInfo
//

h4604_CallPriorityInfo::h4604_CallPriorityInfo(unsigned tag, PASN_Object::TagClass tagClass)
  : PASN_Sequence(tag, tagClass, 4, TRUE, 0)
{
  m_priorityExtension.SetConstraints(PASN_Object::FixedConstraint, 0, 255);
}


#ifndef PASN_NOPRINTON
void h4604_CallPriorityInfo::PrintOn(ostream & strm) const
{
  int indent = strm.precision() + 2;
  strm << "{\n";
  strm << setw(indent+16) << "priorityValue = " << setprecision(indent) << m_priorityValue << '\n';
  if (HasOptionalField(e_priorityExtension))
    strm << setw(indent+20) << "priorityExtension = " << setprecision(indent) << m_priorityExtension << '\n';
  if (HasOptionalField(e_tokens))
    strm << setw(indent+9) << "tokens = " << setprecision(indent) << m_tokens << '\n';
  if (HasOptionalField(e_cryptoTokens))
    strm << setw(indent+15) << "cryptoTokens = " << setprecision(indent) << m_cryptoTokens << '\n';
  if (HasOptionalField(e_rejectReason))
    strm << setw(indent+15) << "rejectReason = " << setprecision(indent) << m_rejectReason << '\n';
  strm << setw(indent-1) << setprecision(indent-2) << "}";
}
#endif


PObject::Comparison h4604_CallPriorityInfo::Compare(const PObject & obj) const
{
#ifndef PASN_LEANANDMEAN
  PAssert(PIsDescendant(&obj, h4604_CallPriorityInfo), PInvalidCast);
#endif
  const h4604_CallPriorityInfo & other = (const h4604_CallPriorityInfo &)obj;

  Comparison result;

  if ((result = m_priorityValue.Compare(other.m_priorityValue)) != EqualTo)
    return result;
  if ((result = m_priorityExtension.Compare(other.m_priorityExtension)) != EqualTo)
    return result;
  if ((result = m_tokens.Compare(other.m_tokens)) != EqualTo)
    return result;
  if ((result = m_cryptoTokens.Compare(other.m_cryptoTokens)) != EqualTo)
    return result;
  if ((result = m_rejectReason.Compare(other.m_rejectReason)) != EqualTo)
    return result;

  return PASN_Sequence::Compare(other);
}


PINDEX h4604_CallPriorityInfo::GetDataLength() const
{
  PINDEX length = 0;
  length += m_priorityValue.GetObjectLength();
  if (HasOptionalField(e_priorityExtension))
    length += m_priorityExtension.GetObjectLength();
  if (HasOptionalField(e_tokens))
    length += m_tokens.GetObjectLength();
  if (HasOptionalField(e_cryptoTokens))
    length += m_cryptoTokens.GetObjectLength();
  if (HasOptionalField(e_rejectReason))
    length += m_rejectReason.GetObjectLength();
  return length;
}


PBoolean h4604_CallPriorityInfo::Decode(PASN_Stream & strm)
{
  if (!PreambleDecode(strm))
    return FALSE;

  if (!m_priorityValue.Decode(strm))
    return FALSE;
  if (HasOptionalField(e_priorityExtension) && !m_priorityExtension.Decode(strm))
    return FALSE;
  if (HasOptionalField(e_tokens) && !m_tokens.Decode(strm))
    return FALSE;
  if (HasOptionalField(e_cryptoTokens) && !m_cryptoTokens.Decode(strm))
    return FALSE;
  if (HasOptionalField(e_rejectReason) && !m_rejectReason.Decode(strm))
    return FALSE;

  return UnknownExtensionsDecode(strm);
}


void h4604_CallPriorityInfo::Encode(PASN_Stream & strm) const
{
  PreambleEncode(strm);

  m_priorityValue.Encode(strm);
  if (HasOptionalField(e_priorityExtension))
    m_priorityExtension.Encode(strm);
  if (HasOptionalField(e_tokens))
    m_tokens.Encode(strm);
  if (HasOptionalField(e_cryptoTokens))
    m_cryptoTokens.Encode(strm);
  if (HasOptionalField(e_rejectReason))
    m_rejectReason.Encode(strm);

  UnknownExtensionsEncode(strm);
}


PObject * h4604_CallPriorityInfo::Clone() const
{
#ifndef PASN_LEANANDMEAN
  PAssert(IsClass(h4604_CallPriorityInfo::Class()), PInvalidCast);
#endif
  return new h4604_CallPriorityInfo(*this);
}


//
// CountryInternationalNetworkCallOriginationIdentification
//

h4604_CountryInternationalNetworkCallOriginationIdentification::h4604_CountryInternationalNetworkCallOriginationIdentification(unsigned tag, PASN_Object::TagClass tagClass)
  : PASN_Sequence(tag, tagClass, 0, TRUE, 0)
{
}


#ifndef PASN_NOPRINTON
void h4604_CountryInternationalNetworkCallOriginationIdentification::PrintOn(ostream & strm) const
{
  int indent = strm.precision() + 2;
  strm << "{\n";
  strm << setw(indent+16) << "numberingPlan = " << setprecision(indent) << m_numberingPlan << '\n';
  strm << setw(indent-1) << setprecision(indent-2) << "}";
}
#endif


PObject::Comparison h4604_CountryInternationalNetworkCallOriginationIdentification::Compare(const PObject & obj) const
{
#ifndef PASN_LEANANDMEAN
  PAssert(PIsDescendant(&obj, h4604_CountryInternationalNetworkCallOriginationIdentification), PInvalidCast);
#endif
  const h4604_CountryInternationalNetworkCallOriginationIdentification & other = (const h4604_CountryInternationalNetworkCallOriginationIdentification &)obj;

  Comparison result;

  if ((result = m_numberingPlan.Compare(other.m_numberingPlan)) != EqualTo)
    return result;

  return PASN_Sequence::Compare(other);
}


PINDEX h4604_CountryInternationalNetworkCallOriginationIdentification::GetDataLength() const
{
  PINDEX length = 0;
  length += m_numberingPlan.GetObjectLength();
  return length;
}


PBoolean h4604_CountryInternationalNetworkCallOriginationIdentification::Decode(PASN_Stream & strm)
{
  if (!PreambleDecode(strm))
    return FALSE;

  if (!m_numberingPlan.Decode(strm))
    return FALSE;

  return UnknownExtensionsDecode(strm);
}


void h4604_CountryInternationalNetworkCallOriginationIdentification::Encode(PASN_Stream & strm) const
{
  PreambleEncode(strm);

  m_numberingPlan.Encode(strm);

  UnknownExtensionsEncode(strm);
}


PObject * h4604_CountryInternationalNetworkCallOriginationIdentification::Clone() const
{
#ifndef PASN_LEANANDMEAN
  PAssert(IsClass(h4604_CountryInternationalNetworkCallOriginationIdentification::Class()), PInvalidCast);
#endif
  return new h4604_CountryInternationalNetworkCallOriginationIdentification(*this);
}


#endif // if ! H323_DISABLE_H4604


// End of h4604.cxx
