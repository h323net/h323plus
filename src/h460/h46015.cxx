//
// H46015.cxx
//
// Code automatically generated by asnparse.
//

#ifdef P_USE_PRAGMA
#pragma implementation "h46015.h"
#endif

#include <h323.h>
#include "h460/h46015.h"

#define new PNEW


#if ! H323_DISABLE_H46015



//
// ChannelSuspendConfirm
//

H46015_ChannelSuspendConfirm::H46015_ChannelSuspendConfirm(unsigned tag, PASN_Object::TagClass tagClass)
  : PASN_Sequence(tag, tagClass, 0, TRUE, 0)
{
}


#ifndef PASN_NOPRINTON
void H46015_ChannelSuspendConfirm::PrintOn(ostream & strm) const
{
  int indent = strm.precision() + 2;
  strm << "{\n";
  strm << setw(indent-1) << setprecision(indent-2) << "}";
}
#endif


PINDEX H46015_ChannelSuspendConfirm::GetDataLength() const
{
  PINDEX length = 0;
  return length;
}


PBoolean H46015_ChannelSuspendConfirm::Decode(PASN_Stream & strm)
{
  if (!PreambleDecode(strm))
    return FALSE;


  return UnknownExtensionsDecode(strm);
}


void H46015_ChannelSuspendConfirm::Encode(PASN_Stream & strm) const
{
  PreambleEncode(strm);


  UnknownExtensionsEncode(strm);
}


PObject * H46015_ChannelSuspendConfirm::Clone() const
{
#ifndef PASN_LEANANDMEAN
  PAssert(IsClass(H46015_ChannelSuspendConfirm::Class()), PInvalidCast);
#endif
  return new H46015_ChannelSuspendConfirm(*this);
}


//
// ChannelSuspendCancel
//

H46015_ChannelSuspendCancel::H46015_ChannelSuspendCancel(unsigned tag, PASN_Object::TagClass tagClass)
  : PASN_Sequence(tag, tagClass, 0, TRUE, 0)
{
}


#ifndef PASN_NOPRINTON
void H46015_ChannelSuspendCancel::PrintOn(ostream & strm) const
{
  int indent = strm.precision() + 2;
  strm << "{\n";
  strm << setw(indent-1) << setprecision(indent-2) << "}";
}
#endif


PINDEX H46015_ChannelSuspendCancel::GetDataLength() const
{
  PINDEX length = 0;
  return length;
}


PBoolean H46015_ChannelSuspendCancel::Decode(PASN_Stream & strm)
{
  if (!PreambleDecode(strm))
    return FALSE;


  return UnknownExtensionsDecode(strm);
}


void H46015_ChannelSuspendCancel::Encode(PASN_Stream & strm) const
{
  PreambleEncode(strm);


  UnknownExtensionsEncode(strm);
}


PObject * H46015_ChannelSuspendCancel::Clone() const
{
#ifndef PASN_LEANANDMEAN
  PAssert(IsClass(H46015_ChannelSuspendCancel::Class()), PInvalidCast);
#endif
  return new H46015_ChannelSuspendCancel(*this);
}


//
// ChannelResumeRequest
//

H46015_ChannelResumeRequest::H46015_ChannelResumeRequest(unsigned tag, PASN_Object::TagClass tagClass)
  : PASN_Sequence(tag, tagClass, 1, TRUE, 0)
{
  m_randomNumber.SetConstraints(PASN_Object::FixedConstraint, 0, 4294967295U);
}


#ifndef PASN_NOPRINTON
void H46015_ChannelResumeRequest::PrintOn(ostream & strm) const
{
  int indent = strm.precision() + 2;
  strm << "{\n";
  strm << setw(indent+15) << "randomNumber = " << setprecision(indent) << m_randomNumber << '\n';
  if (HasOptionalField(e_resetH245))
    strm << setw(indent+12) << "resetH245 = " << setprecision(indent) << m_resetH245 << '\n';
  strm << setw(indent-1) << setprecision(indent-2) << "}";
}
#endif


PObject::Comparison H46015_ChannelResumeRequest::Compare(const PObject & obj) const
{
#ifndef PASN_LEANANDMEAN
  PAssert(PIsDescendant(&obj, H46015_ChannelResumeRequest), PInvalidCast);
#endif
  const H46015_ChannelResumeRequest & other = (const H46015_ChannelResumeRequest &)obj;

  Comparison result;

  if ((result = m_randomNumber.Compare(other.m_randomNumber)) != EqualTo)
    return result;
  if ((result = m_resetH245.Compare(other.m_resetH245)) != EqualTo)
    return result;

  return PASN_Sequence::Compare(other);
}


PINDEX H46015_ChannelResumeRequest::GetDataLength() const
{
  PINDEX length = 0;
  length += m_randomNumber.GetObjectLength();
  if (HasOptionalField(e_resetH245))
    length += m_resetH245.GetObjectLength();
  return length;
}


PBoolean H46015_ChannelResumeRequest::Decode(PASN_Stream & strm)
{
  if (!PreambleDecode(strm))
    return FALSE;

  if (!m_randomNumber.Decode(strm))
    return FALSE;
  if (HasOptionalField(e_resetH245) && !m_resetH245.Decode(strm))
    return FALSE;

  return UnknownExtensionsDecode(strm);
}


void H46015_ChannelResumeRequest::Encode(PASN_Stream & strm) const
{
  PreambleEncode(strm);

  m_randomNumber.Encode(strm);
  if (HasOptionalField(e_resetH245))
    m_resetH245.Encode(strm);

  UnknownExtensionsEncode(strm);
}


PObject * H46015_ChannelResumeRequest::Clone() const
{
#ifndef PASN_LEANANDMEAN
  PAssert(IsClass(H46015_ChannelResumeRequest::Class()), PInvalidCast);
#endif
  return new H46015_ChannelResumeRequest(*this);
}


//
// ChannelResumeResponse
//

H46015_ChannelResumeResponse::H46015_ChannelResumeResponse(unsigned tag, PASN_Object::TagClass tagClass)
  : PASN_Sequence(tag, tagClass, 0, TRUE, 0)
{
}


#ifndef PASN_NOPRINTON
void H46015_ChannelResumeResponse::PrintOn(ostream & strm) const
{
  int indent = strm.precision() + 2;
  strm << "{\n";
  strm << setw(indent-1) << setprecision(indent-2) << "}";
}
#endif


PINDEX H46015_ChannelResumeResponse::GetDataLength() const
{
  PINDEX length = 0;
  return length;
}


PBoolean H46015_ChannelResumeResponse::Decode(PASN_Stream & strm)
{
  if (!PreambleDecode(strm))
    return FALSE;


  return UnknownExtensionsDecode(strm);
}


void H46015_ChannelResumeResponse::Encode(PASN_Stream & strm) const
{
  PreambleEncode(strm);


  UnknownExtensionsEncode(strm);
}


PObject * H46015_ChannelResumeResponse::Clone() const
{
#ifndef PASN_LEANANDMEAN
  PAssert(IsClass(H46015_ChannelResumeResponse::Class()), PInvalidCast);
#endif
  return new H46015_ChannelResumeResponse(*this);
}



#ifndef PASN_NOPRINTON
const static PASN_Names Names_H46015_SignallingChannelData_signallingChannelData[]={
      {"channelSuspendRequest",0}
     ,{"channelSuspendResponse",1}
     ,{"channelSuspendConfirm",2}
     ,{"channelSuspendCancel",3}
     ,{"channelResumeRequest",4}
     ,{"channelResumeResponse",5}
};
#endif
//
// SignallingChannelData_signallingChannelData
//

H46015_SignallingChannelData_signallingChannelData::H46015_SignallingChannelData_signallingChannelData(unsigned tag, PASN_Object::TagClass tagClass)
  : PASN_Choice(tag, tagClass, 6, TRUE
#ifndef PASN_NOPRINTON
    ,(const PASN_Names *)Names_H46015_SignallingChannelData_signallingChannelData,6
#endif
)
{
}


#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
H46015_SignallingChannelData_signallingChannelData::operator H46015_ChannelSuspendRequest &() const
#else
H46015_SignallingChannelData_signallingChannelData::operator H46015_ChannelSuspendRequest &()
{
#ifndef PASN_LEANANDMEAN
  PAssert(PIsDescendant(PAssertNULL(choice), H46015_ChannelSuspendRequest), PInvalidCast);
#endif
  return *(H46015_ChannelSuspendRequest *)choice;
}


H46015_SignallingChannelData_signallingChannelData::operator const H46015_ChannelSuspendRequest &() const
#endif
{
#ifndef PASN_LEANANDMEAN
  PAssert(PIsDescendant(PAssertNULL(choice), H46015_ChannelSuspendRequest), PInvalidCast);
#endif
  return *(H46015_ChannelSuspendRequest *)choice;
}


#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
H46015_SignallingChannelData_signallingChannelData::operator H46015_ChannelSuspendResponse &() const
#else
H46015_SignallingChannelData_signallingChannelData::operator H46015_ChannelSuspendResponse &()
{
#ifndef PASN_LEANANDMEAN
  PAssert(PIsDescendant(PAssertNULL(choice), H46015_ChannelSuspendResponse), PInvalidCast);
#endif
  return *(H46015_ChannelSuspendResponse *)choice;
}


H46015_SignallingChannelData_signallingChannelData::operator const H46015_ChannelSuspendResponse &() const
#endif
{
#ifndef PASN_LEANANDMEAN
  PAssert(PIsDescendant(PAssertNULL(choice), H46015_ChannelSuspendResponse), PInvalidCast);
#endif
  return *(H46015_ChannelSuspendResponse *)choice;
}


#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
H46015_SignallingChannelData_signallingChannelData::operator H46015_ChannelSuspendConfirm &() const
#else
H46015_SignallingChannelData_signallingChannelData::operator H46015_ChannelSuspendConfirm &()
{
#ifndef PASN_LEANANDMEAN
  PAssert(PIsDescendant(PAssertNULL(choice), H46015_ChannelSuspendConfirm), PInvalidCast);
#endif
  return *(H46015_ChannelSuspendConfirm *)choice;
}


H46015_SignallingChannelData_signallingChannelData::operator const H46015_ChannelSuspendConfirm &() const
#endif
{
#ifndef PASN_LEANANDMEAN
  PAssert(PIsDescendant(PAssertNULL(choice), H46015_ChannelSuspendConfirm), PInvalidCast);
#endif
  return *(H46015_ChannelSuspendConfirm *)choice;
}


#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
H46015_SignallingChannelData_signallingChannelData::operator H46015_ChannelSuspendCancel &() const
#else
H46015_SignallingChannelData_signallingChannelData::operator H46015_ChannelSuspendCancel &()
{
#ifndef PASN_LEANANDMEAN
  PAssert(PIsDescendant(PAssertNULL(choice), H46015_ChannelSuspendCancel), PInvalidCast);
#endif
  return *(H46015_ChannelSuspendCancel *)choice;
}


H46015_SignallingChannelData_signallingChannelData::operator const H46015_ChannelSuspendCancel &() const
#endif
{
#ifndef PASN_LEANANDMEAN
  PAssert(PIsDescendant(PAssertNULL(choice), H46015_ChannelSuspendCancel), PInvalidCast);
#endif
  return *(H46015_ChannelSuspendCancel *)choice;
}


#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
H46015_SignallingChannelData_signallingChannelData::operator H46015_ChannelResumeRequest &() const
#else
H46015_SignallingChannelData_signallingChannelData::operator H46015_ChannelResumeRequest &()
{
#ifndef PASN_LEANANDMEAN
  PAssert(PIsDescendant(PAssertNULL(choice), H46015_ChannelResumeRequest), PInvalidCast);
#endif
  return *(H46015_ChannelResumeRequest *)choice;
}


H46015_SignallingChannelData_signallingChannelData::operator const H46015_ChannelResumeRequest &() const
#endif
{
#ifndef PASN_LEANANDMEAN
  PAssert(PIsDescendant(PAssertNULL(choice), H46015_ChannelResumeRequest), PInvalidCast);
#endif
  return *(H46015_ChannelResumeRequest *)choice;
}


#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
H46015_SignallingChannelData_signallingChannelData::operator H46015_ChannelResumeResponse &() const
#else
H46015_SignallingChannelData_signallingChannelData::operator H46015_ChannelResumeResponse &()
{
#ifndef PASN_LEANANDMEAN
  PAssert(PIsDescendant(PAssertNULL(choice), H46015_ChannelResumeResponse), PInvalidCast);
#endif
  return *(H46015_ChannelResumeResponse *)choice;
}


H46015_SignallingChannelData_signallingChannelData::operator const H46015_ChannelResumeResponse &() const
#endif
{
#ifndef PASN_LEANANDMEAN
  PAssert(PIsDescendant(PAssertNULL(choice), H46015_ChannelResumeResponse), PInvalidCast);
#endif
  return *(H46015_ChannelResumeResponse *)choice;
}


PBoolean H46015_SignallingChannelData_signallingChannelData::CreateObject()
{
  switch (tag) {
    case e_channelSuspendRequest :
      choice = new H46015_ChannelSuspendRequest();
      return TRUE;
    case e_channelSuspendResponse :
      choice = new H46015_ChannelSuspendResponse();
      return TRUE;
    case e_channelSuspendConfirm :
      choice = new H46015_ChannelSuspendConfirm();
      return TRUE;
    case e_channelSuspendCancel :
      choice = new H46015_ChannelSuspendCancel();
      return TRUE;
    case e_channelResumeRequest :
      choice = new H46015_ChannelResumeRequest();
      return TRUE;
    case e_channelResumeResponse :
      choice = new H46015_ChannelResumeResponse();
      return TRUE;
  }

  choice = NULL;
  return FALSE;
}


PObject * H46015_SignallingChannelData_signallingChannelData::Clone() const
{
#ifndef PASN_LEANANDMEAN
  PAssert(IsClass(H46015_SignallingChannelData_signallingChannelData::Class()), PInvalidCast);
#endif
  return new H46015_SignallingChannelData_signallingChannelData(*this);
}


//
// ArrayOf_TransportAddress
//

H46015_ArrayOf_TransportAddress::H46015_ArrayOf_TransportAddress(unsigned tag, PASN_Object::TagClass tagClass)
  : PASN_Array(tag, tagClass)
{
}


PASN_Object * H46015_ArrayOf_TransportAddress::CreateObject() const
{
  return new H225_TransportAddress;
}


H225_TransportAddress & H46015_ArrayOf_TransportAddress::operator[](PINDEX i) const
{
  return (H225_TransportAddress &)array[i];
}


PObject * H46015_ArrayOf_TransportAddress::Clone() const
{
#ifndef PASN_LEANANDMEAN
  PAssert(IsClass(H46015_ArrayOf_TransportAddress::Class()), PInvalidCast);
#endif
  return new H46015_ArrayOf_TransportAddress(*this);
}


//
// SignallingChannelData
//

H46015_SignallingChannelData::H46015_SignallingChannelData(unsigned tag, PASN_Object::TagClass tagClass)
  : PASN_Sequence(tag, tagClass, 0, TRUE, 0)
{
}


#ifndef PASN_NOPRINTON
void H46015_SignallingChannelData::PrintOn(ostream & strm) const
{
  int indent = strm.precision() + 2;
  strm << "{\n";
  strm << setw(indent+24) << "signallingChannelData = " << setprecision(indent) << m_signallingChannelData << '\n';
  strm << setw(indent-1) << setprecision(indent-2) << "}";
}
#endif


PObject::Comparison H46015_SignallingChannelData::Compare(const PObject & obj) const
{
#ifndef PASN_LEANANDMEAN
  PAssert(PIsDescendant(&obj, H46015_SignallingChannelData), PInvalidCast);
#endif
  const H46015_SignallingChannelData & other = (const H46015_SignallingChannelData &)obj;

  Comparison result;

  if ((result = m_signallingChannelData.Compare(other.m_signallingChannelData)) != EqualTo)
    return result;

  return PASN_Sequence::Compare(other);
}


PINDEX H46015_SignallingChannelData::GetDataLength() const
{
  PINDEX length = 0;
  length += m_signallingChannelData.GetObjectLength();
  return length;
}


PBoolean H46015_SignallingChannelData::Decode(PASN_Stream & strm)
{
  if (!PreambleDecode(strm))
    return FALSE;

  if (!m_signallingChannelData.Decode(strm))
    return FALSE;

  return UnknownExtensionsDecode(strm);
}


void H46015_SignallingChannelData::Encode(PASN_Stream & strm) const
{
  PreambleEncode(strm);

  m_signallingChannelData.Encode(strm);

  UnknownExtensionsEncode(strm);
}


PObject * H46015_SignallingChannelData::Clone() const
{
#ifndef PASN_LEANANDMEAN
  PAssert(IsClass(H46015_SignallingChannelData::Class()), PInvalidCast);
#endif
  return new H46015_SignallingChannelData(*this);
}


//
// ChannelSuspendRequest
//

H46015_ChannelSuspendRequest::H46015_ChannelSuspendRequest(unsigned tag, PASN_Object::TagClass tagClass)
  : PASN_Sequence(tag, tagClass, 1, TRUE, 0)
{
}


#ifndef PASN_NOPRINTON
void H46015_ChannelSuspendRequest::PrintOn(ostream & strm) const
{
  int indent = strm.precision() + 2;
  strm << "{\n";
  strm << setw(indent+23) << "channelResumeAddress = " << setprecision(indent) << m_channelResumeAddress << '\n';
  strm << setw(indent+18) << "immediateResume = " << setprecision(indent) << m_immediateResume << '\n';
  if (HasOptionalField(e_resetH245))
    strm << setw(indent+12) << "resetH245 = " << setprecision(indent) << m_resetH245 << '\n';
  strm << setw(indent-1) << setprecision(indent-2) << "}";
}
#endif


PObject::Comparison H46015_ChannelSuspendRequest::Compare(const PObject & obj) const
{
#ifndef PASN_LEANANDMEAN
  PAssert(PIsDescendant(&obj, H46015_ChannelSuspendRequest), PInvalidCast);
#endif
  const H46015_ChannelSuspendRequest & other = (const H46015_ChannelSuspendRequest &)obj;

  Comparison result;

  if ((result = m_channelResumeAddress.Compare(other.m_channelResumeAddress)) != EqualTo)
    return result;
  if ((result = m_immediateResume.Compare(other.m_immediateResume)) != EqualTo)
    return result;
  if ((result = m_resetH245.Compare(other.m_resetH245)) != EqualTo)
    return result;

  return PASN_Sequence::Compare(other);
}


PINDEX H46015_ChannelSuspendRequest::GetDataLength() const
{
  PINDEX length = 0;
  length += m_channelResumeAddress.GetObjectLength();
  length += m_immediateResume.GetObjectLength();
  if (HasOptionalField(e_resetH245))
    length += m_resetH245.GetObjectLength();
  return length;
}


PBoolean H46015_ChannelSuspendRequest::Decode(PASN_Stream & strm)
{
  if (!PreambleDecode(strm))
    return FALSE;

  if (!m_channelResumeAddress.Decode(strm))
    return FALSE;
  if (!m_immediateResume.Decode(strm))
    return FALSE;
  if (HasOptionalField(e_resetH245) && !m_resetH245.Decode(strm))
    return FALSE;

  return UnknownExtensionsDecode(strm);
}


void H46015_ChannelSuspendRequest::Encode(PASN_Stream & strm) const
{
  PreambleEncode(strm);

  m_channelResumeAddress.Encode(strm);
  m_immediateResume.Encode(strm);
  if (HasOptionalField(e_resetH245))
    m_resetH245.Encode(strm);

  UnknownExtensionsEncode(strm);
}


PObject * H46015_ChannelSuspendRequest::Clone() const
{
#ifndef PASN_LEANANDMEAN
  PAssert(IsClass(H46015_ChannelSuspendRequest::Class()), PInvalidCast);
#endif
  return new H46015_ChannelSuspendRequest(*this);
}


//
// ChannelSuspendResponse
//

H46015_ChannelSuspendResponse::H46015_ChannelSuspendResponse(unsigned tag, PASN_Object::TagClass tagClass)
  : PASN_Sequence(tag, tagClass, 0, TRUE, 0)
{
}


#ifndef PASN_NOPRINTON
void H46015_ChannelSuspendResponse::PrintOn(ostream & strm) const
{
  int indent = strm.precision() + 2;
  strm << "{\n";
  strm << setw(indent+14) << "okToSuspend = " << setprecision(indent) << m_okToSuspend << '\n';
  strm << setw(indent+23) << "channelResumeAddress = " << setprecision(indent) << m_channelResumeAddress << '\n';
  strm << setw(indent-1) << setprecision(indent-2) << "}";
}
#endif


PObject::Comparison H46015_ChannelSuspendResponse::Compare(const PObject & obj) const
{
#ifndef PASN_LEANANDMEAN
  PAssert(PIsDescendant(&obj, H46015_ChannelSuspendResponse), PInvalidCast);
#endif
  const H46015_ChannelSuspendResponse & other = (const H46015_ChannelSuspendResponse &)obj;

  Comparison result;

  if ((result = m_okToSuspend.Compare(other.m_okToSuspend)) != EqualTo)
    return result;
  if ((result = m_channelResumeAddress.Compare(other.m_channelResumeAddress)) != EqualTo)
    return result;

  return PASN_Sequence::Compare(other);
}


PINDEX H46015_ChannelSuspendResponse::GetDataLength() const
{
  PINDEX length = 0;
  length += m_okToSuspend.GetObjectLength();
  length += m_channelResumeAddress.GetObjectLength();
  return length;
}


PBoolean H46015_ChannelSuspendResponse::Decode(PASN_Stream & strm)
{
  if (!PreambleDecode(strm))
    return FALSE;

  if (!m_okToSuspend.Decode(strm))
    return FALSE;
  if (!m_channelResumeAddress.Decode(strm))
    return FALSE;

  return UnknownExtensionsDecode(strm);
}


void H46015_ChannelSuspendResponse::Encode(PASN_Stream & strm) const
{
  PreambleEncode(strm);

  m_okToSuspend.Encode(strm);
  m_channelResumeAddress.Encode(strm);

  UnknownExtensionsEncode(strm);
}


PObject * H46015_ChannelSuspendResponse::Clone() const
{
#ifndef PASN_LEANANDMEAN
  PAssert(IsClass(H46015_ChannelSuspendResponse::Class()), PInvalidCast);
#endif
  return new H46015_ChannelSuspendResponse(*this);
}


#endif // if ! H323_DISABLE_H46015


// End of H46015.cxx
